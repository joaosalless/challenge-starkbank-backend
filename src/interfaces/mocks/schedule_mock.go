// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/interfaces/schedule.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockScheduledTask is a mock of ScheduledTask interface.
type MockScheduledTask struct {
	ctrl     *gomock.Controller
	recorder *MockScheduledTaskMockRecorder
}

// MockScheduledTaskMockRecorder is the mock recorder for MockScheduledTask.
type MockScheduledTaskMockRecorder struct {
	mock *MockScheduledTask
}

// NewMockScheduledTask creates a new mock instance.
func NewMockScheduledTask(ctrl *gomock.Controller) *MockScheduledTask {
	mock := &MockScheduledTask{ctrl: ctrl}
	mock.recorder = &MockScheduledTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduledTask) EXPECT() *MockScheduledTaskMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockScheduledTask) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockScheduledTaskMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockScheduledTask)(nil).Run))
}

// ScheduleName mocks base method.
func (m *MockScheduledTask) ScheduleName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ScheduleName indicates an expected call of ScheduleName.
func (mr *MockScheduledTaskMockRecorder) ScheduleName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleName", reflect.TypeOf((*MockScheduledTask)(nil).ScheduleName))
}

// ScheduleTime mocks base method.
func (m *MockScheduledTask) ScheduleTime() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleTime")
	ret0, _ := ret[0].(string)
	return ret0
}

// ScheduleTime indicates an expected call of ScheduleTime.
func (mr *MockScheduledTaskMockRecorder) ScheduleTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleTime", reflect.TypeOf((*MockScheduledTask)(nil).ScheduleTime))
}

// MockScheduledTasks is a mock of ScheduledTasks interface.
type MockScheduledTasks struct {
	ctrl     *gomock.Controller
	recorder *MockScheduledTasksMockRecorder
}

// MockScheduledTasksMockRecorder is the mock recorder for MockScheduledTasks.
type MockScheduledTasksMockRecorder struct {
	mock *MockScheduledTasks
}

// NewMockScheduledTasks creates a new mock instance.
func NewMockScheduledTasks(ctrl *gomock.Controller) *MockScheduledTasks {
	mock := &MockScheduledTasks{ctrl: ctrl}
	mock.recorder = &MockScheduledTasksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduledTasks) EXPECT() *MockScheduledTasksMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockScheduledTasks) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockScheduledTasksMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockScheduledTasks)(nil).Run))
}
