// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/interfaces/transfer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dtos "github.com/joaosalless/challenge-starkbank-backend/src/dtos"
)

// MockTransferService is a mock of TransferService interface.
type MockTransferService struct {
	ctrl     *gomock.Controller
	recorder *MockTransferServiceMockRecorder
}

// MockTransferServiceMockRecorder is the mock recorder for MockTransferService.
type MockTransferServiceMockRecorder struct {
	mock *MockTransferService
}

// NewMockTransferService creates a new mock instance.
func NewMockTransferService(ctrl *gomock.Controller) *MockTransferService {
	mock := &MockTransferService{ctrl: ctrl}
	mock.recorder = &MockTransferServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferService) EXPECT() *MockTransferServiceMockRecorder {
	return m.recorder
}

// CreateTransfer mocks base method.
func (m *MockTransferService) CreateTransfer(ctx context.Context, input dtos.CreateTransferInput) (dtos.CreateTransferOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", ctx, input)
	ret0, _ := ret[0].(dtos.CreateTransferOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockTransferServiceMockRecorder) CreateTransfer(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockTransferService)(nil).CreateTransfer), ctx, input)
}

// CreateTransferFromInvoice mocks base method.
func (m *MockTransferService) CreateTransferFromInvoice(ctx context.Context, input dtos.CreateTransferFromInvoiceInput) (dtos.CreateTransferOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransferFromInvoice", ctx, input)
	ret0, _ := ret[0].(dtos.CreateTransferOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransferFromInvoice indicates an expected call of CreateTransferFromInvoice.
func (mr *MockTransferServiceMockRecorder) CreateTransferFromInvoice(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransferFromInvoice", reflect.TypeOf((*MockTransferService)(nil).CreateTransferFromInvoice), ctx, input)
}
